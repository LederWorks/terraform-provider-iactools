package main

import (
	"fmt"
	"log"
	"net"
)

// Function to split a CIDR into two equal parts
func splitCIDR(ipnet *net.IPNet) ([]*net.IPNet, error) {
	ones, bits := ipnet.Mask.Size()
	if ones >= bits {
		return nil, fmt.Errorf("cannot split CIDR %s: mask size is too large", ipnet.String())
	}

	// Calculate the new subnet mask
	newOnes := ones + 1
	newMask := net.CIDRMask(newOnes, bits)

	// Create two new subnets
	firstIP := ipnet.IP.Mask(newMask)
	secondIP := make(net.IP, len(firstIP))
	copy(secondIP, firstIP)
	secondIP[ones/8] |= 1 << (7 - uint(ones%8))

	firstSubnet := &net.IPNet{IP: firstIP, Mask: newMask}
	secondSubnet := &net.IPNet{IP: secondIP, Mask: newMask}

	return []*net.IPNet{firstSubnet, secondSubnet}, nil
}

// Helper function to get the sibling subnet
func getSiblingSubnet(subnets []*net.IPNet, target *net.IPNet) *net.IPNet {
	if subnets[0].String() == target.String() {
		return subnets[1]
	}
	return subnets[0]
}

// Recursive function to find the path to the child CIDR and the inverse CIDR ranges
func findInverseCIDRs(parentCIDR, childCIDR *net.IPNet) ([]*net.IPNet, bool) {
	subnets, err := splitCIDR(parentCIDR)
	if err != nil {
		log.Printf("Error splitting CIDR %s: %v", parentCIDR, err)
		return nil, false
	}

	for _, subnet := range subnets {
		if subnet.Contains(childCIDR.IP) {
			if subnet.String() == childCIDR.String() {
				// Add the sibling CIDR when the child CIDR is found
				return []*net.IPNet{getSiblingSubnet(subnets, subnet)}, true
			}
			inverseCIDRs, found := findInverseCIDRs(subnet, childCIDR)
			if found {
				return append([]*net.IPNet{getSiblingSubnet(subnets, subnet)}, inverseCIDRs...), true
			}
		}
	}

	return nil, false
}

func main() {
	parentCIDR := "10.103.0.0/18"
	childCIDR := "10.103.1.0/24"

	_, parentIPNet, err := net.ParseCIDR(parentCIDR)
	if err != nil {
		log.Fatalf("Error parsing parent CIDR: %v", err)
	}

	_, childIPNet, err := net.ParseCIDR(childCIDR)
	if err != nil {
		log.Fatalf("Error parsing child CIDR: %v", err)
	}

	// Validate that childCIDR is within parentCIDR
	if !parentIPNet.Contains(childIPNet.IP) {
		log.Fatalf("Child CIDR %s is not within Parent CIDR %s", childCIDR, parentCIDR)
	}

	// Find the inverse CIDRs leading to the child CIDR
	inverseCIDRs, found := findInverseCIDRs(parentIPNet, childIPNet)
	if !found {
		log.Println("Child CIDR not found within parent CIDR")
		return
	}

	// Print the parent CIDR
	fmt.Printf("Parent CIDR: %s\n", parentIPNet)

	// Print the child CIDR
	fmt.Printf("Child CIDR: %s\n", childIPNet)

	// Print the inverse CIDRs
	fmt.Println("Inverse CIDRs:")
	for _, cidr := range inverseCIDRs {
		fmt.Println(cidr)
	}
}
